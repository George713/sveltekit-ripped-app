// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DATABASE_URL")
  directUrl = env("SUPABASE_DIRECT_URL")
}

model User {
  id            String  @id @default(uuid())
  username      String  @unique
  isMale        Boolean @default(true)
  passwordHash  String
  userAuthToken String  @unique

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  timeZoneOffset Int      @default(0)

  pointBalance Int @default(0)

  // Recurring activity progress
  lastPlannedOn        DateTime @default(dbgenerated("to_date('1970-01-01', 'YYYY-MM-DD')"))
  lastFinishedEatingOn DateTime @default(dbgenerated("to_date('1970-01-01', 'YYYY-MM-DD')"))
  lastHarvestOn        DateTime @default(dbgenerated("to_date('1970-01-01', 'YYYY-MM-DD')"))
  lastWeeklyPicOn      DateTime @default(dbgenerated("to_date('1970-01-01', 'YYYY-MM-DD')"))
  lastReviewOn         DateTime @default(dbgenerated("to_date('1970-01-01', 'YYYY-MM-DD')"))

  // Appointments
  progressPicOn String @default("SUN")
  reviewOn      String @default("SUN")

  // Progress Player Journey
  initBF       Boolean @default(false)
  initPhoto    Boolean @default(false)
  initCalories Boolean @default(false)

  // RELATED TABLES 
  // ================================
  // Targets
  calorieTargets   CalorieTarget[]
  // Planning & Tracking
  foodItems        FoodItem[]
  eatEstimates     EatEstimate[]
  // Measurements
  weights          Weight[]
  bodyfats         BodyFat[]
  progressPictures ProgressPicture[]
}

model Weight {
  id        Int      @id @default(autoincrement())
  weight    Float
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model BodyFat {
  id        Int      @id @default(autoincrement())
  bodyfat   Float
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model ProgressPicture {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model CalorieTarget {
  id        Int      @id @default(autoincrement())
  calories  Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model FoodItem {
  id                   Int     @id @default(autoincrement())
  itemName             String
  unitIsPtn            Boolean
  unitAmount           Float
  kcal                 Int
  protein              Float
  defaultPtnSizeInGram Float?
  kcalPer100           Int?
  proteinPer100        Float?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  PlannedItems PlannedItem[]
}

model PlannedItem {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  eaten      Boolean  @default(false)
  unitIsPtn  Boolean
  unitAmount Float

  foodItem FoodItem @relation(fields: [foodId], references: [id])
  foodId   Int
}

model EatEstimate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  eaten     Boolean  @default(false)
  kcal      Int
  protein   Int

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
